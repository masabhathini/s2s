#!Jinja2
{% from 'site.cylc' import initialCyclePoint, NMEMBERS, cycle, FCSTDURATION, SITE %}

{% if graph is defined %}
    # For cylc graph set NMEMBERS = 2
    {% set NMEMBERS=2 %}
{% endif %}

[scheduler]
    install = parm/, fix/

[task parameters]
    mem = 1..{{ NMEMBERS }}

[scheduling]
    initial cycle point = {{ initialCyclePoint }}
    initial cycle point constraints = W-1
    [[queues]]
        [[[main_queue]]]
            limit = 100  
            members = WRF

    [[graph]]
        R1 = """
            installWrfWps
        """

        {{cycle}} = """
            get_forcing<mem> => ungrib<mem>
            installWrfWps[^] => ungrib<mem>
            ungrib<mem> => metgrid<mem>
            metgrid<mem> => real<mem>
            real<mem> => wrf<mem>
            wrf<mem> => merge_time<mem>
            merge_time<mem> => weekly_mean<mem>
            weekly_mean<mem> => ens_median
            merge_time<mem> => ens_pctl
        """

[runtime]

    [[root]]
        [[[mail]]]
            to = prajeesh.athippattagopinathan@kaust.edu.sa
        [[[events]]]
            mail events = failed
        [[[environment]]]
            WPS_DIR=** site specific **
            WRF_DIR=** site specific **
            GEO_EM_FILE=** site specific **
            CYCLE_DIR=${CYLC_WORKFLOW_WORK_DIR}/${CYLC_TASK_CYCLE_POINT}
            SHARE_DIR=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
            ETC_DIR=${CYLC_WORKFLOW_RUN_DIR}/etc
            FCST_START_TIME=${CYLC_TASK_CYCLE_POINT}
            FCST_END_TIME=$(isodatetime ${CYLC_TASK_CYCLE_POINT} --offset={{ FCSTDURATION }})
            syyyy=${FCST_START_TIME:0:4}
            smm=${FCST_START_TIME:4:2}
            sdd=${FCST_START_TIME:6:2}
            shh=${FCST_START_TIME:9:2}
            eyyyy=${FCST_END_TIME:0:4}
            emm=${FCST_END_TIME:4:2}
            edd=${FCST_END_TIME:6:2}
            ehh=${FCST_END_TIME:9:2}


    [[ENSMEMBER]]
        [[[environment]]]
            memN=$CYLC_TASK_PARAM_mem
            MEM_SHARE_DIR=${SHARE_DIR}/mem${CYLC_TASK_PARAM_mem}

    [[GET_FORCING]]
        pre-script = """
            rm -rf *
        """
        script = """
            get_forcing.sh -i $input_data -m $memN -o ungrib_input.grib 
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR
            mv ungrib_input.grib $MEM_SHARE_DIR
            rm -rf *
        """
    [[[environment]]]
        input_data= ** site specific **

    [[get_forcing<mem>]]
        inherit = GET_FORCING, ENSMEMBER


    [[UNGRIB]]
        pre-script = """
            rm -rf *
            envsub $ETC_DIR/namelist.wps namelist.wps
            envsub $ETC_DIR/Vtable Vtable
            ln_safe "$ungrib_dir" .
            $link_grib $MEM_SHARE_DIR/ungrib_input.grib .
        """
        script = """
            ./ungrib/ungrib.exe
            grep "Successful completion" ungrib.log
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR/metgrid_inputs
            mv FILE* $MEM_SHARE_DIR/metgrid_inputs
            rm -rf *
        """
        [[[environment]]]
            ungrib_dir=$WPS_DIR/ungrib
            link_grib=$WPS_DIR/link_grib.csh

    [[ungrib<mem>]]
        inherit = UNGRIB, ENSMEMBER

    [[METGRID]]
        pre-script = """
            rm -rf *
            envsub $ETC_DIR/namelist.wps namelist.wps
            mkdir metgrid 
            #  Use metgrid table from Hari for better SST interpolation
            cp $ETC_DIR/METGRID.TBL.ARW metgrid/METGRID.TBL
            ln -sf $MEM_SHARE_DIR/metgrid_inputs/* .
            ln_safe $GEO_EM_FILE geo_em.d01.nc
        """
        script = """
            $run_cmd $metgrid_dir/metgrid.exe
            grep "Successful completion" metgrid.log
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR/real_inputs
            mv met_em* $MEM_SHARE_DIR/real_inputs
            rm -rf *
        """
        [[[environment]]]
            metgrid_dir=$WPS_DIR/metgrid
            run_cmd = ** site specific **

    [[metgrid<mem>]]
        inherit = METGRID, ENSMEMBER

    [[NAMELIST_INPUT]]
        [[[environment]]]
            time_step=20

    [[REAL]]
        inherit = None, NAMELIST_INPUT
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/real_inputs/* .
            # get the grid info from geo_em_file
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
        """

        script = "$run_cmd $real_exe"

        post-script = """
            mkdir -p $MEM_SHARE_DIR/wrf_input
            mv wrf*_d?? $MEM_SHARE_DIR/wrf_input
            rm -rf *
        """

        [[[environment]]]
            nproc_x=-1
            nproc_y=-1
            nio_groups=0
            nio_tasks_per_group=0
            real_exe=$WRF_DIR/main/real.exe
            run_cmd = ** site specific **

    [[real<mem>]]
        inherit = REAL, ENSMEMBER

    [[WRF]]
        inherit = None, NAMELIST_INPUT
        pre-script = """
            rm -rf *
            cp -f $em_real_dir/* .
            ln -sf $MEM_SHARE_DIR/wrf_input/* .

            # source the grid info from wrf_input
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
        """

        script = "$run_cmd $wrf_exe"

        post-script = """
            mkdir -p $MEM_SHARE_DIR/wrf_out
            mv *_d??_????-??-??_* $MEM_SHARE_DIR/wrf_out
            rm -rf *
        """
        [[[environment]]]
            em_real_dir=$WRF_DIR/test/em_real
            wrf_exe=$WRF_DIR/main/wrf.exe
            run_cmd = ** site specific ** # run command: e.g. mpirun -n 4

    [[wrf<mem>]]
        inherit = WRF, ENSMEMBER

    [[MERGE_TIME]]
        script = """
        mkdir -p $output_dir
        merge_time_split_var.sh -o $output_dir/surface_d01_ $input_dir/surface_d01_* 
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/wrf_out
            output_dir=$MEM_SHARE_DIR/merge_time
    
    [[merge_time<mem>]]
        inherit = MERGE_TIME, ENSMEMBER

    [[WEEKLY_MEAN]]
        script = """
            mkdir -p $output_dir
            # Week Start Monday = 1
            weekly_mean.sh --weekstart 1 $input_dir/*.nc
            mv *.nc $output_dir
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
            output_dir=$MEM_SHARE_DIR/weekly_mean
    
    [[weekly_mean<mem>]]
        inherit = WEEKLY_MEAN, ENSMEMBER

    [[FOR_VIZ]]
        [[[environment]]]
            files_to_process=surface_d01_T2.nc surface_d01_U10.nc


    [[ens_pctl]]
        inherit = None, FOR_VIZ
        script = """
            rm -rf *
            mkdir -p $output_dir
            for file in $files_to_process; do

                k=1                
                for ofile in ${SHARE_DIR}/mem*/merge_time/$file; do
                    mkdir -p mem${k}
                    to_latlongrid.sh -r ${resolution} -o mem${k} $ofile
                    k=$((k+1))
                done
                    
                for pctl in $percentiles; do
                    cdo -enspctl,$pctl mem*/$file pctl${pctl}_$file
                done
                rm -rf mem*

                python -c 'import pctl_to_zarr; pctl_to_zarr.app()' pctl*_${file} ${file}.zip
                rm pctl*_${file}
                mv ${file}.zip $output_dir

            done
        """
        [[[meta]]]
            title = "Ensemble percentiles from time-merged WRF outputs, remaps to Lat-Lon"
        [[[environment]]]
            output_dir=$SHARE_DIR/ens_pctl
            percentiles=0 20 40 50 60 80 100
            resolution=0.04

    [[ens_median]]
        inherit = None, FOR_VIZ
        script = """
            rm -rf *
            mkdir -p $output_dir
            for file in $files_to_process; do
                cdo -ensmedian ${SHARE_DIR}/mem*/weekly_mean/$file $file
                to_latlongrid.sh -r 0.04 -o $output_dir $file
                rm $file
            done
        """
        [[[environment]]]
            output_dir=$SHARE_DIR/ens_median

{% include 'include/' ~ SITE ~ '/flow.cylc' %}