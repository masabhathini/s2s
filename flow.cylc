#!Jinja2
{% from 'site.cylc' import initialCyclePoint, NMEMBERS, cycle, FCSTDURATION, SITE, REFORECAST, FORCING_DATA_DIR, FORECAST_DATE, finalCyclePoint %}

{% if graph is defined %}
    # For cylc graph set NMEMBERS = 2
    {% set NMEMBERS=2 %}
{% endif %}

[scheduler]
    install = fix/
    

[task parameters]
    mem = 0..{{ NMEMBERS - 1 }}
    acc2rate = RAINC, RAINNC
    vizfld = T2

[scheduling]
    initial cycle point = {{ initialCyclePoint }}
    final cycle point = {{ finalCyclePoint }}
    runahead limit = P20
    [[queues]]
        [[[main_queue]]]
            limit = 120  
            members = WRF

    [[graph]]
        R1 = """
            installWrfWps
            installCondaPkgs # TODO: bring to core from include
            install7z
        """

        {{cycle}} = """
            get_forcing<mem> => ungrib<mem>
            installWrfWps[^] => ungrib<mem>
            ungrib<mem> => metgrid<mem>
            metgrid<mem> => real<mem>
            real<mem> => wrf<mem>
            wrf<mem> => merge_time<mem>
            installCondaPkgs[^] => merge_time<mem>
            merge_time<mem> => acc2rate<mem><acc2rate>
            acc2rate<mem><acc2rate> => totalrain<mem>

            #Visualization
            totalrain<mem> & install7z[^] => viz<vizfld>

            merge_time<mem> => clean_up<mem>
        """

[runtime]

    [[root]]
        [[[mail]]]
            to = prajeesh.athippattagopinathan@kaust.edu.sa
        [[[events]]]
            mail events = failed
        [[[environment]]]
            WPS_DIR=** site specific **
            WRF_DIR=** site specific **
            CYCLE_DIR=${CYLC_WORKFLOW_WORK_DIR}/${CYLC_TASK_CYCLE_POINT}
            SHARE_DIR=${CYLC_WORKFLOW_SHARE_DIR}/${CYLC_TASK_CYCLE_POINT}
            ETC_DIR=${CYLC_WORKFLOW_RUN_DIR}/etc
            FIX_DIR=${CYLC_WORKFLOW_RUN_DIR}/fix
            FCST_START_TIME=${CYLC_TASK_CYCLE_POINT}
            FCST_END_TIME=$(isodatetime ${CYLC_TASK_CYCLE_POINT} --offset={{ FCSTDURATION }})

            FORECAST_DATE={{FORECAST_DATE}}
            iyyyy=${FORECAST_DATE:0:4}
            imm=${FORECAST_DATE:5:2}
            idd=${FORECAST_DATE:8:2}

            syyyy=${FCST_START_TIME:0:4}
            smm=${FCST_START_TIME:4:2}
            sdd=${FCST_START_TIME:6:2}
            shh=${FCST_START_TIME:9:2}

            eyyyy=${FCST_END_TIME:0:4}
            emm=${FCST_END_TIME:4:2}
            edd=${FCST_END_TIME:6:2}
            ehh=${FCST_END_TIME:9:2}

            {% if test %}
                GEO_EM_FILE=$FIX_DIR/geo_em.d01.nc_S2S_test
            {% else %}
                GEO_EM_FILE=$FIX_DIR/geo_em.d01.nc.S2S_4km_AG_24_flood
            {% endif %}

    [[install7z]]
        script = """
            mkdir -p ${CYLC_WORKFLOW_SHARE_DIR}/bin
            cd ${CYLC_WORKFLOW_SHARE_DIR}/bin
            wget https://www.7-zip.org/a/7z2408-linux-x64.tar.xz 
            tar -xvf 7z2408-linux-x64.tar.xz 
        """

    [[ENSMEMBER]]
        [[[environment]]]
            memN=$CYLC_TASK_PARAM_mem
            MEM_SHARE_DIR=${SHARE_DIR}/mem${CYLC_TASK_PARAM_mem}

    [[GET_FORCING]]
        pre-script = """
            rm -rf *
        """
        script = """
            get_forcing.sh -i $input_data -m $memN -o ungrib_input.grib --year $syyyy $lsm_input
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR
            mv ungrib_input.grib $MEM_SHARE_DIR
            rm -rf *
        """
    [[[environment]]]
        {% if REFORECAST %}
            input_data={{FORCING_DATA_DIR}}/A1H${iyyyy}${imm}${idd}/${iyyyy}${imm}${idd}.grb
            lsm_input="--lsminput {{FORCING_DATA_DIR}}/A1F${iyyyy}${imm}${idd}/${iyyyy}${imm}${idd}.grb"
        {% else %}
            input_data={{FORCING_DATA_DIR}}/A1F${syyyy}${smm}${sdd}/${syyyy}${smm}${sdd}.grb
            lsm_input=""
        {% endif %}

    [[get_forcing<mem>]]
        inherit = GET_FORCING, ENSMEMBER


    [[UNGRIB]]
        pre-script = """
            rm -rf *
            envsub $ETC_DIR/namelist.wps namelist.wps
            envsub $ETC_DIR/Vtable Vtable
            ln_safe "$ungrib_dir" .
            $link_grib $MEM_SHARE_DIR/ungrib_input.grib .
        """
        script = """
            ./ungrib/ungrib.exe
            grep "Successful completion" ungrib.log
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR/metgrid_inputs
            mv FILE* $MEM_SHARE_DIR/metgrid_inputs
            rm -rf *
        """
        [[[environment]]]
            ungrib_dir=$WPS_DIR/ungrib
            link_grib=$WPS_DIR/link_grib.csh

    [[ungrib<mem>]]
        inherit = UNGRIB, ENSMEMBER

    [[METGRID]]
        pre-script = """
            rm -rf *
            envsub $ETC_DIR/namelist.wps namelist.wps
            mkdir metgrid 

            #  Use metgrid table from Hari for better SST interpolation
            cp $ETC_DIR/METGRID.TBL.ARW metgrid/METGRID.TBL

            ln -sf $MEM_SHARE_DIR/metgrid_inputs/* .
            ln_safe $GEO_EM_FILE geo_em.d01.nc
        """
        script = """
            $run_cmd $metgrid_dir/metgrid.exe
            grep "Successful completion" metgrid.log
        """
        post-script = """
            mkdir -p $MEM_SHARE_DIR/real_inputs
            mv met_em* $MEM_SHARE_DIR/real_inputs
            rm -rf *
        """
        [[[environment]]]
            metgrid_dir=$WPS_DIR/metgrid
            run_cmd = ** site specific **

    [[metgrid<mem>]]
        inherit = METGRID, ENSMEMBER

    [[NAMELIST_INPUT]]
        [[[environment]]]
            time_step=20

    [[REAL]]
        inherit = None, NAMELIST_INPUT
        pre-script = """
            rm -rf *
            ln -sf $MEM_SHARE_DIR/real_inputs/* .
            # get the grid info from geo_em_file
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
        """

        script = "$run_cmd $real_exe"

        post-script = """
            mkdir -p $MEM_SHARE_DIR/wrf_input
            mv wrf*_d?? $MEM_SHARE_DIR/wrf_input
            rm -rf *
        """

        [[[environment]]]
            nproc_x=-1
            nproc_y=-1
            nio_groups=0
            nio_tasks_per_group=0
            real_exe=$WRF_DIR/main/real.exe
            run_cmd = ** site specific **

    [[real<mem>]]
        inherit = REAL, ENSMEMBER

    [[WRF]]
        inherit = None, NAMELIST_INPUT
        pre-script = """
            rm -rf *
            cp -f $em_real_dir/* .
            ln -sf $MEM_SHARE_DIR/wrf_input/* .

            # source the grid info from wrf_input
            source grid_info.sh $GEO_EM_FILE
            envsub $ETC_DIR/namelist.input namelist.input
            envsub $ETC_DIR/iofields.txt iofields.txt 
        """

        script = "$run_cmd $wrf_exe"

        post-script = """
            mkdir -p $MEM_SHARE_DIR/wrf_out
            mv *_d??_????-??-??_* $MEM_SHARE_DIR/wrf_out
            rm -rf *
        """
        [[[environment]]]
            em_real_dir=$WRF_DIR/test/em_real
            wrf_exe=$WRF_DIR/main/wrf.exe
            run_cmd = ** site specific ** # run command: e.g. mpirun -n 4

    [[wrf<mem>]]
        inherit = WRF, ENSMEMBER

    [[MERGE_TIME]]
        script = """
        mkdir -p $output_dir
        merge_time_split_var.sh -o $output_dir/surface_d01_ $input_dir/surface_d01_* 
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/wrf_out
            output_dir=$MEM_SHARE_DIR/merge_time
    
    [[merge_time<mem>]]
        inherit = MERGE_TIME, ENSMEMBER

    [[ACC2TOTAL]]
        script = """
        acc2rate.sh $input_dir/surface_d01_${varname}.nc $input_dir/surface_d01_T${varname}.nc
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
            varname=$CYLC_TASK_PARAM_acc2rate
    
    [[acc2rate<mem><acc2rate>]]
        inherit = ACC2RATE, ENSMEMBER

    [[TOTALRAIN]]
        script = """
        set -x
        cdo -add $input_dir/surface_d01_RAINC_rate.nc $input_dir/surface_d01_RAINNC_rate.nc $input_dir/surface_d01_RAIN_rate.nc
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR/merge_time
    
    [[totalrain<mem>]]
        inherit = TOTALRAIN, ENSMEMBER

    [[CLEAN_UP]]
        script = """
            cd $input_dir
            rm -rf wrf_out wrf_input metgrid_inputs real_inputs
        """
        [[[environment]]]
            input_dir=$MEM_SHARE_DIR
    
    [[clean_up<mem>]]
        inherit = CLEAN_UP, ENSMEMBER

    [[VIZ]]
        script = """
            output_dir=${SHARE_DIR}/viz/${fieldname}/stage
            mkdir -p $output_dir
            python -c 'import viz; viz.app()' ${fieldname} "${SHARE_DIR}/mem*/merge_time/${input_file_name}" ""
            mv output/* $output_dir
            #rm -rf *
        """
        [[[environment]]]
            fieldname=
            input_file_name=

    [[viz<vizfld>]]
        inherit = None, VIZ
        [[[environment]]]
            fieldname=$CYLC_TASK_PARAM_vizfld
            input_file_name=surface_d01_${CYLC_TASK_PARAM_vizfld}.nc




{% include 'include/' ~ SITE ~ '/flow.cylc' %}